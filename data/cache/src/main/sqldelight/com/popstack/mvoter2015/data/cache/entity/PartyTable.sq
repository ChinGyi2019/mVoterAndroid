import com.popstack.mvoter2015.domain.party.model.PartyId;
import java.lang.Boolean;
import java.lang.Integer;
import java.time.LocalDate;
import java.time.LocalDateTime;
import kotlin.String;
import kotlin.collections.List;

CREATE TABLE PartyTable(
  id TEXT AS PartyId PRIMARY KEY NOT NULL,
  number INTEGER AS Integer NOT NULL,
  burmeseName TEXT NOT NULL,
  englishName TEXT,
  abbreviation TEXT,
  flagImage TEXT NOT NULL,
  sealImage TEXT NOT NULL,
  region TEXT NOT NULL,
  leadersAndChairmen TEXT AS List<String> NOT NULL,
  memberCount TEXT,
  contacts TEXT AS List<String> NOT NULL,
  headquarterLocation TEXT NOT NULL,
  policy TEXT NOT NULL,
  isEstablishedDueToArticle25 INTEGER AS Boolean NOT NULL,
  establishmentApplicationDate INTEGER AS LocalDate,
  establishmentApprovalDate INTEGER AS LocalDate,
  registrationApplicationDate INTEGER AS LocalDate,
  registrationApprovalDate INTEGER AS LocalDate,
  lastUpdated INTEGER AS LocalDateTime NOT NULL
);

insertOrReplace:
INSERT OR REPLACE INTO PartyTable VALUES(
:id, :number, :burmeseName, :englishName, :abbreviation, :flagUrl, :sealUrl, :region,
:leadersAndChairmen,:memberCount, :contacts, :headquarterLocation, :policy,
:isEstablishedDueToArticle25,
:establishmentApplicationDate, :establishmentApprovalDate,
:registrationApplicationDate, :registrationApprovalDate,
:lastUpdated
);

getWithPage:
SELECT * FROM PartyTable WHERE lastUpdated >= :lastUpdated ORDER BY number ASC LIMIT :limit OFFSET :offset;

getById:
SELECT * FROM PartyTable WHERE id = :id;

getByIdAndLastUpdated:
SELECT * FROM PartyTable WHERE id = :id AND lastUpdated >= :lastUpdated;

searchWithPage:
SELECT * FROM PartyTable
WHERE burmeseName LIKE :query
OR englishName LIKE :query
OR abbreviation LIKE :query
ORDER BY id ASC LIMIT :limit OFFSET :offset;

deleteAll:
DELETE FROM PartyTable;